FLUOXETINE = SSRI_FLUOXETINEFlag,
FLUVOXAMINE = SSRI_FLUVOXAMINEFlag,
PAROXETINE = SSRI_PAROXETINEFlag,
SERTRALINE = SSRI_SERTRALINEFlag,
DOLUXETINE = SNRI_DOLUXETINEFlag,
REBOXETINE = SNRI_REBOXETINEFlag,
VENLAFAXINE = OTHERAD_VENLAFAXINEFlag,
AGOMELATIN = OTHERAD_AGOMELATINFlag,
BUPROPION = OTHERAD_BUPROPIONFlag,
MIRTAZAPINE = MirtazapineFlag,
TRYPTOPHAN = OTHERAD_TRYPTOPHANFlag,
TRAZODONE = OtherAD_TrazodoneFlag) %>%
#creating one drug class and name column and one Flag column
gather(AD_Type_and_Name, Binary_AD_Flag, AMITRIPTYLINE:TRAZODONE, na.rm = FALSE)
ggplot(aes(x = AD_Type_and_Name, y = Binary_AD_Flag,
color = AD_Type_and_Name), data =  ad_1) +
geom_bar(stat = "identity") +
theme(legend.position = "none", axis.text.x = element_text(angle = 60, hjust = 1)) +
ggtitle("Use of Antidepressants") +
ylab("Number of Patients on Antidepressants")
ad_1 %>% filter(Binary_AD_Flag == 1) %>%
group_by(AD_Type_and_Name) %>%
summarise(count = n()) %>%
arrange(count) %>%
data.frame() %>% kable(align = "l")
# Excluding Other AD Tryptophan from this list because it is not at all used in this sample.
# Clinician impression is to exclude Tryptophan entirely from the analysis.
ad_1 %>% filter(Binary_AD_Flag == 1) %>%
group_by(AD_Type_and_Name) %>%
summarise(count = n()) %>%
arrange(count) %>%
data.frame() %>% kable(align = "l")
# Excluding Other AD Tryptophan from this list because it is not at all used in this sample.
# Clinician impression is to exclude Tryptophan entirely from the analysis.
ad_1 %>% filter(Binary_AD_Flag == 1) %>%
group_by(AD_Type_and_Name) %>%
summarise(count = n()) %>%
arrange(count) %>%
data.frame() %>% kable(align = "l")
# Excluding Other AD Tryptophan from this list because it is not at all used in this sample.
# Clinician impression is to exclude Tryptophan entirely from the analysis.
# Make a variable that means "type" of AD user: Single AD, Single class and Multiple class AD user.
# ggg <- ad_3 %>%  mutate(Number_of_Drugs = rowSums(ad_3[,3:29], na.rm = TRUE))
#ad_3 <- ad_2 %>%
#              filter(PatientonAD == 1)
## count number of drug for each sample
## the easy way to calc rowSums on specific columns is to use R's [row, cols] indexing syntax as above
# Make a variable that means "type" of AD user: Single AD, Single class and Multiple class AD user.
# ggg <- ad_3 %>%  mutate(Number_of_Drugs = rowSums(ad_3[,3:29], na.rm = TRUE))
#ad_3 <- ad_2 %>%
#              filter(PatientonAD == 1)
## count number of drug for each sample
## the easy way to calc rowSums on specific columns is to use R's [row, cols] indexing syntax as above
# Make a variable that means "type" of AD user: Single AD, Single class and Multiple class AD user.
# ggg <- ad_3 %>%  mutate(Number_of_Drugs = rowSums(ad_3[,3:29], na.rm = TRUE))
#ad_3 <- ad_2 %>%
#              filter(PatientonAD == 1)
## count number of drug for each sample
## the easy way to calc rowSums on specific columns is to use R's [row, cols] indexing syntax as above
# Make a variable that means "type" of AD user: Single AD, Single class and Multiple class AD user.
# ggg <- ad_3 %>%  mutate(Number_of_Drugs = rowSums(ad_3[,3:29], na.rm = TRUE))
#ad_3 <- ad_2 %>%
#              filter(PatientonAD == 1)
## count number of drug for each sample
## the easy way to calc rowSums on specific columns is to use R's [row, cols] indexing syntax as above
# Make a variable that means "type" of AD user: Single AD, Single class and Multiple class AD user.
# ggg <- ad_3 %>%  mutate(Number_of_Drugs = rowSums(ad_3[,3:29], na.rm = TRUE))
#ad_3 <- ad_2 %>%
#              filter(PatientonAD == 1)
## count number of drug for each sample
## the easy way to calc rowSums on specific columns is to use R's [row, cols] indexing syntax as above
ad$SNRI_DOLUXETINEFlag <- as.numeric(ad$SNRI_DOLUXETINEFlag)
ad$SNRI_REBOXETINEFlag <- as.numeric(ad$SNRI_REBOXETINEFlag)
ad$OTHERAD_VENLAFAXINEFlag <- as.numeric(ad$OTHERAD_VENLAFAXINEFlag)
ad$TCA_AmitriptylineFlag <- as.numeric(ad$TCA_AmitriptylineFlag)
ad$TCA_CLOMIPRAMINEFlag <- as.numeric(ad$TCA_CLOMIPRAMINEFlag )
ad$TCA_DOSULEPINFlag <- as.numeric(ad$TCA_DOSULEPINFlag)
ad$TCA_DOXEPINFlag <- as.numeric(ad$TCA_DOXEPINFlag)
ad$TCA_IMIPRAMINEFlag <- as.numeric(ad$TCA_IMIPRAMINEFlag)
ad$TCA_LOFEPRAMINEFlag <- as.numeric(ad$TCA_LOFEPRAMINEFlag)
ad$TCA_NORTRIPTYLINEFlag <- as.numeric(ad$TCA_NORTRIPTYLINEFlag)
ad$TCA_TRIMIPRAMINEFlag <- as.numeric(ad$TCA_TRIMIPRAMINEFlag)
ad$TCARELATED_MIANSERINFlag <- as.numeric(ad$TCARELATED_MIANSERINFlag)
ad$MAOI_ISOCARBOXAZIDFlag <- as.numeric(ad$MAOI_ISOCARBOXAZIDFlag)
ad$MAOI_PHENELZINEFlag <- as.numeric(ad$MAOI_PHENELZINEFlag)
ad$MAOI_TRANYLCYPROMAINEFlag <- as.numeric(ad$MAOI_TRANYLCYPROMAINEFlag)
ad$REVERSEMAOI_MOCLOBEMIDEFlag <- as.numeric(ad$REVERSEMAOI_MOCLOBEMIDEFlag)
ad$SSRI_CITALOPRAMFlag <- as.numeric(ad$SSRI_CITALOPRAMFlag)
ad$SSRI_ESCITALOPRAMFlag <- as.numeric(ad$SSRI_ESCITALOPRAMFlag)
ad$SSRI_FLUOXETINEFlag <- as.numeric(ad$SSRI_FLUOXETINEFlag )
ad$SSRI_FLUVOXAMINEFlag <- as.numeric( ad$SSRI_FLUVOXAMINEFlag )
ad$SSRI_PAROXETINEFlag <- as.numeric(ad$SSRI_PAROXETINEFlag )
ad$SSRI_SERTRALINEFlag <- as.numeric(ad$SSRI_SERTRALINEFlag )
ad$OTHERAD_AGOMELATINFlag <- as.numeric(ad$OTHERAD_AGOMELATINFlag )
ad$OTHERAD_BUPROPIONFlag <- as.numeric(ad$OTHERAD_BUPROPIONFlag )
ad$OtherAD_TrazodoneFlag <- as.numeric(ad$OtherAD_TrazodoneFlag )
ad$MirtazapineFlag <- as.numeric(ad$MirtazapineFlag )
ad$LatestNumberOfSpells <- as.numeric(ad$LatestNumberOfSpells)
ad_3 <- ad %>% select(a, PatientonAD,
TCA_AmitriptylineFlag,
TCA_CLOMIPRAMINEFlag,
TCA_DOSULEPINFlag,
TCA_DOXEPINFlag,
TCA_IMIPRAMINEFlag,
TCA_LOFEPRAMINEFlag,
TCA_NORTRIPTYLINEFlag,
TCA_TRIMIPRAMINEFlag,
TCARELATED_MIANSERINFlag,
MAOI_ISOCARBOXAZIDFlag,
MAOI_PHENELZINEFlag,
MAOI_TRANYLCYPROMAINEFlag,
REVERSEMAOI_MOCLOBEMIDEFlag,
SSRI_CITALOPRAMFlag,
SSRI_ESCITALOPRAMFlag,
SSRI_FLUOXETINEFlag,
SSRI_FLUVOXAMINEFlag,
SSRI_PAROXETINEFlag,
SSRI_SERTRALINEFlag,
SNRI_DOLUXETINEFlag,
SNRI_REBOXETINEFlag,
OTHERAD_VENLAFAXINEFlag,
OTHERAD_AGOMELATINFlag,
OTHERAD_BUPROPIONFlag,
OtherAD_TrazodoneFlag,
MirtazapineFlag,
primary_diagnosis,
LithiumFlag,
ethnicitycleaned,
cleaneddateofbirth,
Gender_ID,
imd_score,
Marital_Status_ID,
LatestNumberOfSpells,
Accepted_Date,
Agitated_Behaviour_Score_ID,
Self_Injury_Score_ID,
Problem_Drinking_Drugs_Score_ID,
Cognitive_Problems_Score_ID,
Physical_Illness_Score_ID,
Hallucinations_Score_ID,
Depressed_Mood_Score_ID,
Other_Mental_Problems_Score_ID,
Other_Mental_Problems_Type_ID,
Relationship_Problems_Score_ID,
Daily_Living_Problems_Score_ID,
Living_Conditions_Problems_Score_ID,
Occupational_Problems_Score_ID,
Adjusted_Total,
PBR_Repeat_Self_Harm_ID,
Rating_Date,
noncompliant,
compliant,
PTSessionDate,
SessionNumber,
AntiPsychoticDate,
AntiPsychoticFlag,
PastADdate,
PastAD,
BeenInpatientin12months,
Address_Start,
RecentHallucinations,
SixmonthsPastHallucinations,
PoorMotivationPast,
PoorAffectPast,
AnhedoniaPast,
HopelessnessPast,
WorthlessnessPast,
SuicideAttemptPast,
AnergiaPast,
WorthlessnessRecent,
HopelessnessRecent,
AnhedoniaRecent,
PoorAffectRecent,
PoorMotivationRecent,
SuicideAttemptRecent,
AnergiaRecent)
ad_3 <- ad_3 %>%
mutate(TCA.Total = rowSums(ad_3[,3:11], na.rm = TRUE)) %>%
mutate(MAOI.Total = rowSums(ad_3[,12:15], na.rm = TRUE)) %>%
mutate(SSRI.Total = rowSums(ad_3[,16:21], na.rm = TRUE)) %>%
mutate(SNRI.Total = rowSums(ad_3[,22:24], na.rm = TRUE)) %>%
mutate(OtherAD.Total = rowSums(ad_3[,25:27], na.rm = TRUE)) %>%
mutate(Mirt.Total = MirtazapineFlag, na.rm = TRUE)
ad_3 <- ad_3 %>%
mutate(Number_of_Drugs = rowSums(ad_3[,3:28], na.rm = TRUE)) %>%
mutate(Type.of.user = ifelse(Number_of_Drugs %in% 1, "Single",
ifelse(Number_of_Drugs %in% 0, "Not on Antidepressants", "Multiple")))
ad_3 <- ad_3 %>% filter(Type.of.user == "Multiple" | Type.of.user == "Single") %>%
mutate(Type.of.multiple.AD.user = ifelse(Number_of_Drugs == TCA.Total, "TCA.class.AD.user",
ifelse(Number_of_Drugs == MAOI.Total, "MAOI.class.AD.user",
ifelse(Number_of_Drugs == SSRI.Total, "SSRI.class.AD.user",
ifelse(Number_of_Drugs == SNRI.Total, "SNRI.class.AD.user",
ifelse(Number_of_Drugs == Mirt.Total, "Mirt.class.AD.user",
ifelse((TCA.Total == 1 & MAOI.Total == 1), "TCA.MAOI",
ifelse((TCA.Total == 1 & SSRI.Total == 1), "TCA.SSRI",
ifelse((TCA.Total == 1 & SNRI.Total == 1), "TCA.SNRI",
ifelse((TCA.Total == 1 & OtherAD.Total == 1), "TCA.OtherAD",
ifelse((TCA.Total == 1 & Mirt.Total == 1), "TCA.Mirtazapine",
ifelse((MAOI.Total == 1 & SSRI.Total == 1), "MAOI.SSRI",
ifelse((MAOI.Total == 1 & SNRI.Total == 1), "MAOI.SNRI",
ifelse((MAOI.Total == 1 & OtherAD.Total == 1), "MAOI.OtherAD",
ifelse((MAOI.Total == 1 & Mirt.Total == 1), "MAOI.Mirtazapine",
ifelse((SSRI.Total == 1 & SNRI.Total == 1), "SSRI.SNRI",
ifelse((SSRI.Total == 1 & OtherAD.Total == 1), "SSRI.OtherAD",
ifelse((SSRI.Total == 1 & Mirt.Total == 1), "SSRI.Mirtazapine",
ifelse((SNRI.Total == 1 & OtherAD.Total == 1), "SNRI.OtherAD",
ifelse((SNRI.Total == 1 & Mirt.Total == 1), "SNRI.Mirtazapine",
ifelse((OtherAD.Total == 1 & Mirt.Total == 1), "OtherAD.Mirtazapine", "ThreeAndMore.classes.AD.user")))))))))))))))))))))
# notes:
# If TCA.Total == Number_of_Drugs, then "Single Class Prescription"
#    MAOI.Total == Number_of_Drugs, then "Single Class Prescription"
#    SSRI.Total == Number_of_Drugs, then "Single Class Prescription"
#    SNRI.Total == Number_of_Drugs, then "Single Class Prescription"
#    OtherAD.Total == Number_of_Drugs, then "Single Class Prescription"
#    Mirt.Total == Number_of_Drugs, then "Single Class Prescription"
# If not, then "Multiple Class Prescription"
head(ad_3[,c("Number_of_Drugs","TCA.Total", "MAOI.Total", "SSRI.Total", "SNRI.Total", "OtherAD.Total", "Mirt.Total", "Type.of.multiple.AD.user")])
qplot(Type.of.user, data = ad_3, fill = Type.of.user) +
labs(title = "Type of Antidepressant Users")
qplot(Type.of.multiple.AD.user, data = ad_3, fill = Type.of.multiple.AD.user) +
labs(title = "Type of Multiple Antidepressant User") +
theme(legend.position = "none", axis.text.x = element_text(angle = 60, hjust = 1))
ad_3 %>%  group_by(Type.of.multiple.AD.user) %>%
summarise(count = n()) %>%
arrange(count) %>%
data.frame() %>%
kable(align = "l")
ad_3 %>% filter(Type.of.user == "Single") %>%
gather(Antidepressant, Flag, TCA_AmitriptylineFlag:MirtazapineFlag) %>%
filter(Flag == 1) %>%
group_by(Antidepressant) %>%
summarise(count = n()) %>%
arrange(count) %>%
data.frame() %>% kable(align = "l")
#__The most common mutually exclusive "antidepressant user" groups__
#      In light of how antidepressants are being prescribed, any further analysis of antidepressants use will
#      be made in three separate cohorts based on antidepressant usage:
#                  i) patients who are prescribed single antidepressants.
#                  ii) patients who are prescribed multiple antidepressants from the SAME CLASS
#                  iii) patients who are prescribed multiple antidepressants from different classes
#                       (e.g. patients who are prescribed SSRI and SNRI drugs will be groups together)
#Db.i implies Database 1
Db.i <- filter(ad_3, Type.of.multiple.AD.user == "Single AD" | Type.of.multiple.AD.user == "Not on AD")
str(Db.i)
#Db.ii implies Database 2
Db.ii <- filter(ad_3, Type.of.multiple.AD.user == "SNRI.class.AD.user" |
Type.of.multiple.AD.user == "SSRI.class.AD.user" |
Type.of.multiple.AD.user == "TCA.class.AD.user" |
Type.of.multiple.AD.user == "Not on AD")
str(Db.ii)
#Db.iii implies Database 2
Db.iii <- filter(ad_3, Type.of.multiple.AD.user == "MAOI.SNRI" |
Type.of.multiple.AD.user == "MAOI.SSRI" |
Type.of.multiple.AD.user == "Multi.class.AD.user" |
Type.of.multiple.AD.user == "OtherAD.Mirtazapine" |
Type.of.multiple.AD.user == "SNRI.Mirtazapine" |
Type.of.multiple.AD.user == "SNRI.OtherAD" |
Type.of.multiple.AD.user == "SSRI.OtherAD" |
Type.of.multiple.AD.user == "SSRI.SNRI" |
Type.of.multiple.AD.user == "TCA.MAOI " |
Type.of.multiple.AD.user == "TCA.Mirtazapine" |
Type.of.multiple.AD.user == "TCA.SNRI" |
Type.of.multiple.AD.user == "TCA.SSRI" |
Type.of.multiple.AD.user == "Not on AD")
str(Db.iii)
# assigning 1 and 0 as values for Patient on AD and Patient off AD, respectivley, in the 6 months.
ad$PatientonAD[is.na(ad$PatientonAD)] <- 0 # Not on AD in snapshot 6 months
ad$PatientonAD[ad$PatientonAD != 0] <- 1 # On AD in snapshot 6 months
# ad_2 %>% head(20)
#Number of Individuals on AD vs off AD
a <- ad %>%
group_by(PatientonAD) %>%
summarise(count = n(),
percentage = (n()/sum(2039, 2118))*100)
a$PatientonAD[a$PatientonAD == 0] <- "No"
a$PatientonAD[a$PatientonAD == 1] <- "Yes"
#PatientonAD: 1 - Patient on AD during snapshot; 2 - Patient off AD during snapshot
# useful link on chi^2 test: http://www.stat.yale.edu/Courses/1997-98/101/chisq.htm
ad <- ad %>%
mutate(dob = as.Date(cleaneddateofbirth, format = "%d/%m/%Y")) %>%
mutate(age = year(as.Date("01/01/2014", format = "%d/%m/%Y")) - year(dob)) %>%
mutate(Accepted_Date = as.Date(Accepted_Date, format = "%d/%m/%Y")) %>%
mutate(time.at.mh.service = abs(date(as.Date("01/01/2014", format = "%d/%m/%Y")) - date(Accepted_Date))) %>%
mutate(imd_quartiles = cut(imd_score, b = 4)) %>%
mutate(Adjusted_Total = cut(Adjusted_Total, b = 3)) %>%
mutate(Adjusted_Total)
mutate(ethnicity = ifelse(ethnicitycleaned == "African (N)", "Black",
ifelse(ethnicitycleaned == "Any other Asian background (L)", "Asian",
ifelse(ethnicitycleaned == "Any other black background (P)", "Black",
ifelse(ethnicitycleaned == "Any other ethnic group (S)", "Other",
ifelse(ethnicitycleaned == "Any other mixed background (G)", "Other",
ifelse(ethnicitycleaned == "Any other white background (C)", "White",
ifelse(ethnicitycleaned == "Bangladeshi (K)", "Asian",
ifelse(ethnicitycleaned == "British (A)", "White",
ifelse(ethnicitycleaned == "Caribbean (M)", "Black",
ifelse(ethnicitycleaned == "Chinese (R)", "Asian",
ifelse(ethnicitycleaned == "Indian (H)", "Asian",
ifelse(ethnicitycleaned == "Irish (B)", "White",
ifelse(ethnicitycleaned == "Not Stated (Z)", "Other",
ifelse(ethnicitycleaned == "Pakistani (J)", "Asian",
ifelse(ethnicitycleaned == "White and Asian (F)", "Other",
ifelse(ethnicitycleaned == "White and Black African (E)", "Other",
ifelse(ethnicitycleaned == "White and black Caribbean (D)", "Other",
ifelse(ethnicitycleaned == "xNx", "Other", "Other"))))))))))))))))))) %>%
mutate(marital_status = ifelse((Marital_Status_ID == "Cohabiting" | Marital_Status_ID == "Married" | Marital_Status_ID == "Married/Civil Partner"), "Married",
ifelse((Marital_Status_ID == "Divorced" | Marital_Status_ID == "Divorced/Civil Partnership Dissolved" | Marital_Status_ID == "Separated"), "Separated",
ifelse((Marital_Status_ID == "Widowed/Surviving Civil Partner" | Marital_Status_ID ==  "Widowed"), "Widowed",
ifelse((Marital_Status_ID == "Not Disclosed" | Marital_Status_ID ==  "Not Known"), "Unknown",
ifelse((Marital_Status_ID == "Single"), "Single", "Unknown")))))) %>%
mutate(LatestSpell = ifelse(LatestNumberOfSpells < 5, "2 - 4 spells", "More than 4 spells"))
ad$BeenInpatientin12months[!is.na(ad$BeenInpatientin12months)] <- "Was an Inpatient"
ad$BeenInpatientin12months[is.na(ad$BeenInpatientin12months)] <- "Was Not an Inpatient"
ad$Gender_ID[ad$Gender_ID == "Not Specified"] <- NA
ad.use.gender.diff <- table(ad$PatientonAD, ad$Gender_ID)
ad.use.gender.diff <- ad.use.gender.diff[ ,-3]
ad.use.ethnicity <- table(ad$ethnicity, ad$PatientonAD)
ad.use.ethnicity <- ad.use.ethnicity[-36, ]
ad %>%
mutate(dob = as.Date(cleaneddateofbirth, format = "%d/%m/%Y")) %>%
mutate(age = year(as.Date("01/01/2014", format = "%d/%m/%Y")) - year(dob)) %>%
mutate(Accepted_Date = as.Date(Accepted_Date, format = "%d/%m/%Y")) %>%
mutate(time.at.mh.service = abs(date(as.Date("01/01/2014", format = "%d/%m/%Y")) - date(Accepted_Date))) %>%
mutate(imd_quartiles = cut(imd_score, b = 4)) %>%
mutate(Adjusted_Total = cut(Adjusted_Total, b = 3))
ad %>%
mutate(dob = as.Date(cleaneddateofbirth, format = "%d/%m/%Y")) %>%
mutate(age = year(as.Date("01/01/2014", format = "%d/%m/%Y")) - year(dob)) %>%
mutate(Accepted_Date = as.Date(Accepted_Date, format = "%d/%m/%Y")) %>%
mutate(time.at.mh.service = abs(date(as.Date("01/01/2014", format = "%d/%m/%Y")) - date(Accepted_Date))) %>%
mutate(imd_quartiles = cut(imd_score, b = 4)) %>%
mutate(Adjusted_Total = cut(Adjusted_Total, b = 4))
str(ad)
table(ad$Adjusted_Total)
table(is.na(ad$Adjusted_Total))
rm(list=ls())
gc()
# for toc
#http://rmarkdown.rstudio.com/html_document_format.html
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(tidyr))
suppressPackageStartupMessages(library(lubridate))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(rmarkdown))
suppressPackageStartupMessages(library(knitr))
suppressPackageStartupMessages(library(markdown))
suppressPackageStartupMessages(library(stargazer))
suppressPackageStartupMessages(library(gmodels))
source('~/.active-rstudio-document', echo=TRUE)
table(ad$Adjusted_Total_level, ad$PatientonAD)
table(ad$SuicideAttemptRecent, ad$PatientonAD)
names(Db.i)
# 3586 obs. of  89 variables
#1495 of which recently attempted suicide
Db.i$SuicideAttemptRecent[!is.na(Db.i$SuicideAttemptRecent)] <- "Yes"
Db.i$SuicideAttemptRecent[is.na(Db.i$SuicideAttemptRecent)] <- "No"
table(Db.i$SuicideAttemptRecent)
ad.single <- Db.i %>% select(a, PatientonAD, 3:28, SuicideAttemptRecent, Type.of.user) %>%
gather("ADname", "ADFlag", 3:28, na.rm = FALSE) %>% filter(ADFlag == 1 | is.na(ADFlag)) %>% distinct(a)
data.frame(head(ad.single))
ad.single$ADname[ad.single$ADname == "TCA_AmitriptylineFlag" & is.na(ad.single$ADFlag)] <- NA
ad.single %>% group_by(ADname, SuicideAttemptRecent) %>% summarise(count = n()) %>% data.frame() %>% spread(SuicideAttemptRecent, count)
table(ad$SuicideAttemptRecent, ad$PatientonAD)
table(Db.i$SuicideAttemptRecent, ad$PatientonAD)
table(Db.i$SuicideAttemptRecent, Db.i$PatientonAD)
ad$SuicideAttemptRecent[!is.na(ad$SuicideAttemptRecent)] <- "Yes"
ad$SuicideAttemptRecent[is.na(ad$SuicideAttemptRecent)] <- "No"
table(ad$SuicideAttemptRecent, ad$PatientonAD)
ad.use.suicide.attempt <- table(ad$SuicideAttemptRecent, ad$PatientonAD)
kable(ad.use.suicide.attempt)
kable(ad.use.suicide.attempt, col.names = "Not on AD (counts)", "On AD (counts)")
kable(ad.use.suicide.attempt, col.names = "", "Not on AD (counts)", "On AD (counts)")
kable(ad.use.suicide.attempt, col.names = "SA", "Not on AD (counts)", "On AD (counts)")
kable(ad.use.suicide.attempt, col.names = c("Not on AD (counts)", "On AD (counts)"))
chisq.test(ad.use.suicide.attempt)
CrossTable(x = ad$SuicideAttemptRecent, y = ad$PatientonAD, prop.chisq = FALSE, prop.t = TRUE, prop.r = TRUE, prop.c = TRUE)
s.a. <- CrossTable(x = ad$SuicideAttemptRecent, y = ad$PatientonAD, prop.chisq = FALSE, prop.t = TRUE, prop.r = TRUE, prop.c = TRUE)
kable((s.a.$prop.row)*100,
col.names = c("Not on AD (%)", "On AD (%)"),
digits = 2,
caption = "Recent Suicide Attempt by Antidepressant Status")
ad$SuicideAttemptRecent[!is.na(ad$SuicideAttemptRecent)] <- "Yes"
ad$SuicideAttemptRecent[is.na(ad$SuicideAttemptRecent)] <- "No"
table(ad$SuicideAttemptRecent)
rm(list=ls())
gc()
# for toc
#http://rmarkdown.rstudio.com/html_document_format.html
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(tidyr))
suppressPackageStartupMessages(library(lubridate))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(rmarkdown))
suppressPackageStartupMessages(library(knitr))
suppressPackageStartupMessages(library(markdown))
suppressPackageStartupMessages(library(stargazer))
suppressPackageStartupMessages(library(gmodels))
setwd("/Users/andreafernandes/Desktop/Google Drive/Springboard_Data_Science_Course_2016/DataScience/Lesson5_EDA/GapMinder_Project/Lesson5_EDA/Gapminder_project_Antidepressants/")
ad <- read.csv("/Users/andreafernandes/Desktop/Google Drive/Springboard_Data_Science_Course_2016/DataScience/Lesson5_EDA/GapMinder_Project/Lesson5_EDA/Gapminder_project_Antidepressants/Antidepressant_Profiling_2014_Cohort_v2.csv", header = TRUE)
table(ad$SuicideAttemptRecent)
table(is.na(ad$SuicideAttemptRecent))
ad$SuicideAttemptRecent[!is.na(ad$SuicideAttemptRecent)] <- "Yes"
ad$SuicideAttemptRecent[is.na(ad$SuicideAttemptRecent)] <- "No"
table(ad$SuicideAttemptRecent)
source('~/.active-rstudio-document', echo=TRUE)
table(ad$SuicideAttemptRecent)
#Cleaning history/restart, installing packages, setting up wd and loading data.
rm(list=ls())
gc()
suppressPackageStartupMessages(library(foreign))
suppressPackageStartupMessages(library(lubridate))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(gmodels))
suppressPackageStartupMessages(library(GGally))
suppressPackageStartupMessages(library(gridExtra))
suppressPackageStartupMessages(library(knitr))
suppressPackageStartupMessages(library(tidyr))
setwd("/Users/andreafernandes/Desktop/Google Drive/Springboard_Data_Science_Course_2016/RLearning_Springboard_ProjectED/R_Springboard/Rmd_files_and_output/")
ed <- read.dta("/Users/andreafernandes/Desktop/Google Drive/Springboard_Data_Science_Course_2016/RLearning_Springboard_ProjectED/R_Springboard/Raw_Data/For_Excel.dta")
ed$LSOA11
ed %>% group_by(LSOA11) %>% summarise(count = n())
ed %>% group_by(LSOA11) %>% summarise(count = n()) %>% data.frame()
length(unique(ed$LSOA11))
head(data.frame(ed))
#cleaning the data. I've done this previously and so will use the cleaned dataset for EDA and draft production.
edclean <- ed %>%
#Rename each ethnic density column
rename(TotalResidentsInLSOA = All_Usual_Residents,
WhiteBrit_EDPercent  = G,
WhiteIrish_EDPercent = White_Irish_Percentage,
OtherWhite_EDPercent = White_Other_White_GypsyIrishTrav,
WhiteBlackCarib_EDPercent = P,
WhiteBlackAfri_EDPercent = R,
WhiteAsian_EDPercent = T,
OtherMixed_EDPercent = V,
BritIndian_EDPercent = Asian_Asian_British_Indian_Perce,
BritPakistani_EDPercent = Asian_Asian_British_Pakistani_Pe,
BritBangladeshi_EDPercent = AB,
BritChinese_EDPercent = Asian_Asian_British_Chinese_Perc,
OtherAsian_EDPercent = Asian_Asian_British_OtherAsian_P,
African_EDPercent = AH,
Caribbean_EDPercent =  AJ,
OtherBlack_EDPercent = AL,
WhiteBrit_Residents = White_English_Welsh_Scottish_Nor,
TotalIrish_Residents = White_Irish_Count,
OtherWhite_Residents = White_Gypsy_Irish_Traveller_Coun,
MixedCaribbean_Residents = Mixed_Multiple_Ethnic_Groups_Whi,
MixedAsian_Residents = S,
OtherMixed_Residents = Mixed_Multiple_Ethnic_Groups_Oth,
BritIndian_Residents = Asian_Asian_British_Indian_Count,
BritPakistani_Residents = Asian_Asian_British_Pakistani_Co,
BritBangladeshi_Residents = Asian_Asian_British_Bangladeshi_,
BritChinese_Residents = Asian_Asian_British_Chinese_Coun,
OtherAsian_Residents = Asian_Asian_British_OtherAsian_C,
African_Residents = Black_African_Caribbean_BlackBr,
Caribbean_Residents = Black_African_Caribbean_Black_Br,
OtherBlack_Residents = AK,
OtherEthnicity_Residents = Other_Ethnic_Group_AnyOtherEthni)
#Note on Ethnic Density Score: The main exposure variable of the dataset is Ethnicdensity score. Ethnic density is a score that defines the percentage of that makes up ethnicity of the individual within a give area. At the moment, each individual in the dataset is assigned to every ethnicity percentage relevant to their area of residence at diagnosis.
#To assign own ethnicity ethnic density to each individual (in one column) we need to create a new variable.
#e.g. if ID is caribbean, then assign Caribbean_ED value.
edclean <- edclean %>% mutate(ethnicdensityscore = ifelse(ethnicitycleaned == "British (A)", WhiteBrit_EDPercent,
ifelse(ethnicitycleaned == "African (N)", African_EDPercent,
ifelse(ethnicitycleaned == "Irish (B)", WhiteIrish_EDPercent,
ifelse(ethnicitycleaned == "Any other Asian background (L)", OtherAsian_EDPercent,
ifelse(ethnicitycleaned == "Any other black background (P)", OtherBlack_EDPercent,
ifelse(ethnicitycleaned == "Any other mixed background (G)", OtherMixed_EDPercent,
ifelse(ethnicitycleaned == "Any other white background (C)", OtherWhite_EDPercent,
ifelse(ethnicitycleaned == "Bangladeshi (K)", BritBangladeshi_EDPercent,
ifelse(ethnicitycleaned == "Caribbean (M)", Caribbean_EDPercent,
ifelse(ethnicitycleaned == "Chinese (R)", BritChinese_EDPercent,
ifelse(ethnicitycleaned == "Indian (H)", BritIndian_EDPercent,
ifelse(ethnicitycleaned == "Pakistani (J)", BritPakistani_EDPercent,
ifelse(ethnicitycleaned == "White and Asian (F)", WhiteAsian_EDPercent,
ifelse(ethnicitycleaned == "White and Black African (E)", WhiteBlackAfri_EDPercent,
ifelse(ethnicitycleaned == "White and black Caribbean (D)", WhiteBlackCarib_EDPercent,  " " )))))))))))))))) %>%
mutate(ethnicdensityscore = as.numeric(ethnicdensityscore))
edclean %>% select(ethnicdensityscore, ethnicitycleaned, LSOA11) %>% group_by(LSOA, ethnicitycleaned)
edclean %>% select(ethnicdensityscore, ethnicitycleaned, LSOA11) %>% group_by(LSOA11, ethnicitycleaned)
edclean %>% select(ethnicdensityscore, ethnicitycleaned, LSOA11) %>% group_by(LSOA11, ethnicitycleaned) %>% summarise(ethcount = n(ethnicitycleaned))
edclean %>% select(ethnicdensityscore, ethnicitycleaned, LSOA11) %>% group_by(LSOA11, ethnicitycleaned) %>% summarise(length(ethnicitycleaned))
edclean %>% select(ethnicdensityscore, ethnicitycleaned, LSOA11) %>% group_by(LSOA11, ethnicitycleaned) %>% summarise(ratio = length(ethnicitycleaned),)
edclean %>% select(ethnicdensityscore, ethnicitycleaned, LSOA11) %>% group_by(LSOA11, ethnicitycleaned) %>% summarise(ratio = length(ethnicitycleaned)/n())
edclean %>% select(ethnicdensityscore, ethnicitycleaned, LSOA11) %>% group_by(LSOA11, ethnicitycleaned) %>% summarise(ratio = length(ethnicitycleaned)) %>% spread(ethnicgroup, ratio, ethnicitycleaned:ratio)
edclean %>% select(ethnicdensityscore, ethnicitycleaned, LSOA11) %>% group_by(LSOA11, ethnicitycleaned) %>% summarise(ethcount = length(ethnicitycleaned))
edclean %>% select(ethnicdensityscore, ethnicitycleaned, LSOA11) %>% group_by(LSOA11, ethnicitycleaned) %>% summarise(ethcount = length(ethnicitycleaned)) %>% group_by(LSOA11) %>% summarise(n())
edclean %>% select(ethnicdensityscore, ethnicitycleaned, LSOA11) %>% group_by(LSOA11, ethnicitycleaned) %>% summarise(ethcount = length(ethnicitycleaned)) %>% ungroup() %>% group_by(LSOA11) %>% summarise(n())
edclean %>% select(ethnicdensityscore, ethnicitycleaned, LSOA11) %>% group_by(LSOA11, ethnicitycleaned) %>% summarise(ethcount = length(ethnicitycleaned)) %>% ungroup() %>% group_by(LSOA11) %>% summarise(n()) %>% head(20)
edclean %>% select(ethnicdensityscore, ethnicitycleaned, LSOA11) %>% group_by(LSOA11, ethnicitycleaned) %>% mutate(ethcount = length(ethnicitycleaned)) #%>% ungroup() %>% group_by(LSOA11) %>% summarise(n()) %>% head(20)
edclean %>% select(ethnicdensityscore, ethnicitycleaned, LSOA11) %>% group_by(LSOA11, ethnicitycleaned) %>% mutate(ethcount = length(ethnicitycleaned)) %>% group_by(LSOA11) %>% mutate(LSOAsize = n())
edclean %>% select(ethnicdensityscore, ethnicitycleaned, LSOA11) %>% group_by(LSOA11, ethnicitycleaned) %>% mutate(ethcount = length(ethnicitycleaned)) %>% group_by(LSOA11) %>% mutate(LSOAsize = n(), ratio = ethcount/LSOAsize)
LSOAethnicdensity <- edclean %>% select(ethnicdensityscore, ethnicitycleaned, LSOA11) %>% group_by(LSOA11, ethnicitycleaned) %>% mutate(ethcount = length(ethnicitycleaned)) %>% group_by(LSOA11) %>% mutate(LSOAsize = n(), ratio = ethcount/LSOAsize)
dim(LSOAethnicdensity)
plot(x = ethnicdensityscore, y = ratio, data = LSOAethnicdensity)
plot(ratio~ethnicdensityscore, data = LSOAethnicdensity)
qplot(ratio, data = LSOAethnicdensity)
qplot(LSOAsize, data = LSOAethnicdensity)
qplot(LSOAsize, data = LSOAethnicdensity, fill = ethnicitycleaned)
ggplot(aes(y = ratio, x = ethnicdensityscore), data = LSOAethnicdensity) + geom_point()
ggplot(aes(y = ratio, x = ethnicdensityscore), data = LSOAethnicdensity) + geom_point(size = LSOAsize)
ggplot(aes(y = ratio, x = ethnicdensityscore), data = LSOAethnicdensity) + geom_point(aes(size = LSOAsize))
ggplot(aes(y = ratio, x = ethnicdensityscore, fill = ethnicitycleaned), data = LSOAethnicdensity) + geom_point(aes(size = LSOAsize))
ggplot(aes(y = ratio, x = ethnicdensityscore, color = ethnicitycleaned), data = LSOAethnicdensity) + geom_point(aes(size = LSOAsize))
LSOAethnicdensity <- edclean %>% select(ethnicdensityscore, ethnicitycleaned, LSOA11) %>% group_by(LSOA11, ethnicitycleaned) %>% mutate(ethcount = length(ethnicitycleaned)) %>% group_by(LSOA11) %>% mutate(LSOAsize = n(), ratio = ethcount/LSOAsize)
LSOAethnicdensity <- edclean %>% select(ethnicdensityscore, ethnicitycleaned, LSOA11) %>% group_by(LSOA11, ethnicitycleaned) %>% mutate(ethcount = length(ethnicitycleaned)) %>% group_by(LSOA11) %>% mutate(LSOAsize = n(), ratio = ethcount/LSOAsize) %>% distinct()
LSOAethnicdensity
LSOAethnicdensity <- edclean %>% select(ethnicdensityscore, ethnicitycleaned, LSOA11) %>% group_by(LSOA11, ethnicitycleaned) %>% mutate(ethcount = length(ethnicitycleaned)) %>% group_by(LSOA11) %>% mutate(LSOAsize = n(), ratio = ethcount/LSOAsize) %>% ungroup() %>% distinct()
LSOAethnicdensity <- edclean %>% select(ethnicdensityscore, ethnicitycleaned, LSOA11) %>% group_by(LSOA11, ethnicitycleaned) %>% mutate(ethcount = length(ethnicitycleaned)) %>% group_by(LSOA11) %>% mutate(LSOAsize = n(), ratio = ethcount/LSOAsize) %>% ungroup() %>% distinct()
edclean %>% select(ethnicdensityscore, ethnicitycleaned, LSOA11) %>% group_by(LSOA11, ethnicitycleaned) %>% mutate(ethcount = length(ethnicitycleaned)) %>% group_by(LSOA11) %>% mutate(LSOAsize = n(), ratio = ethcount/LSOAsize) %>% ungroup() %>% distinct()
LSOAethnicdensity <- edclean %>% select(ethnicdensityscore, ethnicitycleaned, LSOA11) %>% group_by(LSOA11, ethnicitycleaned) %>% mutate(ethcount = length(ethnicitycleaned)) %>% group_by(LSOA11) %>% mutate(LSOAsize = n(), ratio = ethcount/LSOAsize) %>% ungroup() %>% distinct()
ggplot(aes(y = ratio, x = ethnicdensityscore, color = ethnicitycleaned), data = LSOAethnicdensity) + geom_point(aes(size = LSOAsize))
savehistory("~/Desktop/Google Drive/Springboard_Data_Science_Course_2016/RLearning_Springboard_ProjectED/R_Springboard/Rmd_files_and_output/AF210416.Rhistory")
